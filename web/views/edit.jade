extends layout

block content
  h1= title
    div.btn-group#buttons(data-spy="affix",data-offset-top="30",style="margin-left:1em")
      a.btn.btn-primary#btn_load Reset
      a.btn.btn-success#btn_save Save
      a.btn.btn-danger#btn_delete Delete
      a.btn.btn-default#btn_cancel(href='#{baseURL}/') Cancel

  div#editor_holder
    
  style.
    .tt-menu.tt-open {
      background-color: rgba(255, 255, 255, 0.8);
      border: 1px solid #ccc;
      border-radius: 5px;
      min-width: 8em;      
    }
    .tt-menu.tt-open .tt-suggestion {
      padding: 3px 5px;
    }
    .tt-menu.tt-open .tt-suggestion:hover,
    .tt-menu.tt-open .tt-suggestion.tt-cursor {
      cursor: pointer;
      background-color: lemonchiffon;
    }

  script.
    JSONEditor.defaults.options.ajax = true
    JSONEditor.defaults.options.theme = 'bootstrap3'
    JSONEditor.defaults.options.iconlib = 'bootstrap3'
    var element = document.getElementById('editor_holder')
    var editor = new JSONEditor(element, {
      schema: !{schema}
    })
    editor.on('ready', function () {
      $("#btn_load").trigger('click')
    })
    editor.on('change', function () {
      var langs = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.whitespace,
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: !{JSON.stringify(languages)}
      })
      var refs = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.whitespace,
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: !{JSON.stringify(references)}
      })
      var opts = {
        minLength: 1,
        highlight: true
      }
      $('td[data-schemapath^="root.senses"][data-schemapath*="etymologies"] input:not(.typeahead)').addClass('typeahead').typeahead(opts, {
        name: 'language',
        source: langs
      })
      $('td[data-schemapath^="root.etymology"][data-schemapath$="language"] input:not(.typeahead)').addClass('typeahead').typeahead(opts, {
        name: 'language',
        source: langs
      })
      $('td[data-schemapath^="root.etymology"][data-schemapath$="reference"] input:not(.typeahead)').addClass('typeahead').typeahead(opts, {
        name: 'reference',
        source: refs
      })
    })
    
    $(document).ready(function () {
      // Apply ladda to buttons
      $("#buttons a.btn").each(function (x, elem) {
        $(elem).addClass('ladda-button').attr('data-style', 'expand-left')
      })
    })
    
    $("#btn_load").click(function () {
      var l = $(this).ladda()
      l.ladda('start')
      $.ajax({
        method: "GET",
        url: "#{baseURL}/entries/#{id}",
        success: function (data) {
          editor.setValue(data)
        },
        error: function (err) {
          alert(err.statusText + "\n" + err.responseJSON.name + "\n" + err.responseJSON.err)
        },
        complete: function () {
          l.ladda('stop')
        }
      })
    })
    $("#btn_save").click(function () {
      var id = "#{id}" // null when adding
      var l = $(this).ladda()
      l.ladda('start')
      $.ajax({
        method: "POST",
        contentType: "application/json",
        url: "#{baseURL}/entries/"+id,
        data: JSON.stringify(editor.getValue()),
        success: function (data) {
          if (id) {
            editor.setValue(data)
          } else {
            window.location.replace('#{baseURL}/edit/'+data._id)
          }
        },
        error: function (err) {
          alert(err.statusText + "\n" + err.responseJSON.name + "\n" + err.responseJSON.err)
        },
        complete: function () {
          l.ladda('stop')
        }
      })
    })
    $("#btn_delete").click(function () {

      if (!confirm("Really delete this entry?"))
        return false;

      var l = $(this).ladda()
      l.ladda('start')
      $.ajax({
        method: "DELETE",
        url: "#{baseURL}/entries/#{id}",
        success: function () {
          window.location.replace('#{baseURL}/')
        },
        error: function (err) {
          alert(err.statusText + "\n" + err.responseJSON.name + "\n" + err.responseJSON.err)
        },
        complete: function () {
          l.ladda('stop')
        }
      })
    })
